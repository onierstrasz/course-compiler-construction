/* Generated By:JavaCC: Do not edit this line. StraightLineParser.java */
package parser;

import syntaxtree.*;
import java.util.Vector;


public class StraightLineParser implements StraightLineParserConstants {

  final public Goal Goal() throws ParseException {
   StmList n0;
   NodeToken n1;
   Token n2;
    n0 = StmList();
    n2 = jj_consume_token(0);
      n2.beginColumn++; n2.endColumn++;
      n1 = JTBToolkit.makeNodeToken(n2);
     {if (true) return new Goal(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public StmList StmList() throws ParseException {
   Stm n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Stm n5;
    n0 = Stm();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(SEMICOLON);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Stm();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new StmList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public Stm Stm() throws ParseException {
   NodeChoice n0;
   Assignment n1;
   PrintStm n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n1 = Assignment();
        n0 = new NodeChoice(n1, 0);
      break;
    case PRINT:
      n2 = PrintStm();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Stm(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Assignment Assignment() throws ParseException {
   WriteId n0;
   NodeToken n1;
   Token n2;
   Exp n3;
    n0 = WriteId();
    n2 = jj_consume_token(ASSIGN);
             n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Exp();
     {if (true) return new Assignment(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public WriteId WriteId() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new WriteId(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PrintStm PrintStm() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ExpList n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(PRINT);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = ExpList();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new PrintStm(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public ExpList ExpList() throws ParseException {
   Exp n0;
   NodeListOptional n1 = new NodeListOptional();
   AppendExp n2;
    n0 = Exp();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      n2 = AppendExp();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ExpList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public AppendExp AppendExp() throws ParseException {
   NodeToken n0;
   Token n1;
   Exp n2;
    n1 = jj_consume_token(COMMA);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Exp();
     {if (true) return new AppendExp(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public Exp Exp() throws ParseException {
   MulExp n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   PlusOp n3;
   MinOp n4;
    n0 = MulExp();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        n3 = PlusOp();
           n2 = new NodeChoice(n3, 0);
        break;
      case MINUS:
        n4 = MinOp();
           n2 = new NodeChoice(n4, 1);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new Exp(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public PlusOp PlusOp() throws ParseException {
   NodeToken n0;
   Token n1;
   MulExp n2;
    n1 = jj_consume_token(PLUS);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = MulExp();
     {if (true) return new PlusOp(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public MinOp MinOp() throws ParseException {
   NodeToken n0;
   Token n1;
   MulExp n2;
    n1 = jj_consume_token(MINUS);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = MulExp();
     {if (true) return new MinOp(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public MulExp MulExp() throws ParseException {
   PrimExp n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   MulOp n3;
   DivOp n4;
    n0 = PrimExp();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        n3 = MulOp();
           n2 = new NodeChoice(n3, 0);
        break;
      case DIVIDE:
        n4 = DivOp();
           n2 = new NodeChoice(n4, 1);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new MulExp(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public MulOp MulOp() throws ParseException {
   NodeToken n0;
   Token n1;
   PrimExp n2;
    n1 = jj_consume_token(TIMES);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = PrimExp();
     {if (true) return new MulOp(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public DivOp DivOp() throws ParseException {
   NodeToken n0;
   Token n1;
   PrimExp n2;
    n1 = jj_consume_token(DIVIDE);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = PrimExp();
     {if (true) return new DivOp(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public PrimExp PrimExp() throws ParseException {
   NodeChoice n0;
   ReadId n1;
   Num n2;
   StmExp n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n1 = ReadId();
        n0 = new NodeChoice(n1, 0);
      break;
    case INTEGER_LITERAL:
      n2 = Num();
        n0 = new NodeChoice(n2, 1);
      break;
    case LPAREN:
      n3 = StmExp();
        n0 = new NodeChoice(n3, 2);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new PrimExp(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ReadId ReadId() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new ReadId(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Num Num() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(INTEGER_LITERAL);
                          n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Num(n0);}
    throw new Error("Missing return statement in function");
  }

  final public StmExp StmExp() throws ParseException {
   NodeToken n0;
   Token n1;
   StmList n2;
   NodeToken n3;
   Token n4;
   Exp n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = StmList();
    n4 = jj_consume_token(COMMA);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = Exp();
    n7 = jj_consume_token(RPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new StmExp(n0,n2,n3,n5,n6);}
    throw new Error("Missing return statement in function");
  }

  public StraightLineParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x40,0x20800,0x400,0x3000,0x3000,0xc000,0xc000,0x30100,};
   }

  public StraightLineParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public StraightLineParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new StraightLineParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public StraightLineParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new StraightLineParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public StraightLineParser(StraightLineParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public void ReInit(StraightLineParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[20];
    for (int i = 0; i < 20; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
