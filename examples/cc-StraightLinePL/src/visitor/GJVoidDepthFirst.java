//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJVoidDepthFirst<A> implements GJVoidVisitor<A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
      }
   }

   public void visit(NodeOptional n, A argu) {
      if ( n.present() )
         n.node.accept(this,argu);
   }

   public void visit(NodeSequence n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeToken n, A argu) {}

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> StmList()
    * f1 -> <EOF>
    */
   public void visit(Goal n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> Stm()
    * f1 -> ( ";" Stm() )*
    */
   public void visit(StmList n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> Assignment()
    *       | PrintStm()
    */
   public void visit(Stm n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> WriteId()
    * f1 -> ":="
    * f2 -> Exp()
    */
   public void visit(Assignment n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public void visit(WriteId n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "print"
    * f1 -> "("
    * f2 -> ExpList()
    * f3 -> ")"
    */
   public void visit(PrintStm n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
   }

   /**
    * f0 -> Exp()
    * f1 -> ( AppendExp() )*
    */
   public void visit(ExpList n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> ","
    * f1 -> Exp()
    */
   public void visit(AppendExp n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> MulExp()
    * f1 -> ( PlusOp() | MinOp() )*
    */
   public void visit(Exp n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> "+"
    * f1 -> MulExp()
    */
   public void visit(PlusOp n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> "-"
    * f1 -> MulExp()
    */
   public void visit(MinOp n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> PrimExp()
    * f1 -> ( MulOp() | DivOp() )*
    */
   public void visit(MulExp n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> "*"
    * f1 -> PrimExp()
    */
   public void visit(MulOp n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> "/"
    * f1 -> PrimExp()
    */
   public void visit(DivOp n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> ReadId()
    *       | Num()
    *       | StmExp()
    */
   public void visit(PrimExp n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public void visit(ReadId n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public void visit(Num n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "("
    * f1 -> StmList()
    * f2 -> ","
    * f3 -> Exp()
    * f4 -> ")"
    */
   public void visit(StmExp n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
   }

}
