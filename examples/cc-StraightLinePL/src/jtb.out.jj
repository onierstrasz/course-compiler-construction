//
// Generated by JTB 1.3.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(StraightLineParser)
package parser;

import syntaxtree.*;
import java.util.Vector;


public class StraightLineParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(StraightLineParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

TOKEN :
{
   <SEMICOLON: ";">
   | <ASSIGN: ":=">
   | <LPAREN: "(">
   | <RPAREN: ")">
   | <COMMA: ",">
   | <PRINT: "print">
   | <PLUS: "+">
   | <MINUS: "-">
   | <TIMES: "*">
   | <DIVIDE: "/">
}

TOKEN :
{
   <INTEGER_LITERAL: (["1"-"9"] (["0"-"9"])* | "0")>
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["a"-"z", "A"-"Z"]>
   | <#DIGIT: ["0"-"9"]>
}

Goal Goal() :
{
   StmList n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=StmList()
   n2=<EOF> { 
      n2.beginColumn++; n2.endColumn++;
      n1 = JTBToolkit.makeNodeToken(n2);
   }
   
   { return new Goal(n0,n1); }
}

StmList StmList() :
{
   Stm n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Stm n5;

   
}
{
   n0=Stm()
   (
      { n2 = new NodeSequence(2); }
      n4=";" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Stm()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new StmList(n0,n1); }
}

Stm Stm() :
{
   NodeChoice n0;
   Assignment n1;
   PrintStm n2;

   
}
{
   (
      n1=Assignment()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=PrintStm()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new Stm(n0); }
}

Assignment Assignment() :
{
   WriteId n0;
   NodeToken n1;
   Token n2;
   Exp n3;

   
}
{
   n0=WriteId()
   n2=":=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Exp()
   
   { return new Assignment(n0,n1,n3); }
}

WriteId WriteId() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new WriteId(n0); }
}

PrintStm PrintStm() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ExpList n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="print" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ExpList()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new PrintStm(n0,n2,n4,n5); }
}

ExpList ExpList() :
{
   Exp n0;
   NodeListOptional n1 = new NodeListOptional();
   AppendExp n2;

   
}
{
   n0=Exp()
   (
      n2=AppendExp()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ExpList(n0,n1); }
}

AppendExp AppendExp() :
{
   NodeToken n0;
   Token n1;
   Exp n2;

   
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Exp()
   
   { return new AppendExp(n0,n2); }
}

Exp Exp() :
{
   MulExp n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   PlusOp n3;
   MinOp n4;

   
}
{
   n0=MulExp()
   (
      (
         n3=PlusOp()
         { n2 = new NodeChoice(n3, 0); }
      |
         n4=MinOp()
         { n2 = new NodeChoice(n4, 1); }
      )
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new Exp(n0,n1); }
}

PlusOp PlusOp() :
{
   NodeToken n0;
   Token n1;
   MulExp n2;

   
}
{
   n1="+" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=MulExp()
   
   { return new PlusOp(n0,n2); }
}

MinOp MinOp() :
{
   NodeToken n0;
   Token n1;
   MulExp n2;

   
}
{
   n1="-" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=MulExp()
   
   { return new MinOp(n0,n2); }
}

MulExp MulExp() :
{
   PrimExp n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   MulOp n3;
   DivOp n4;

   
}
{
   n0=PrimExp()
   (
      (
         n3=MulOp()
         { n2 = new NodeChoice(n3, 0); }
      |
         n4=DivOp()
         { n2 = new NodeChoice(n4, 1); }
      )
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new MulExp(n0,n1); }
}

MulOp MulOp() :
{
   NodeToken n0;
   Token n1;
   PrimExp n2;

   
}
{
   n1="*" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=PrimExp()
   
   { return new MulOp(n0,n2); }
}

DivOp DivOp() :
{
   NodeToken n0;
   Token n1;
   PrimExp n2;

   
}
{
   n1="/" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=PrimExp()
   
   { return new DivOp(n0,n2); }
}

PrimExp PrimExp() :
{
   NodeChoice n0;
   ReadId n1;
   Num n2;
   StmExp n3;

   
}
{
   (
      n1=ReadId()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=Num()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=StmExp()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new PrimExp(n0); }
}

ReadId ReadId() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ReadId(n0); }
}

Num Num() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INTEGER_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Num(n0); }
}

StmExp StmExp() :
{
   NodeToken n0;
   Token n1;
   StmList n2;
   NodeToken n3;
   Token n4;
   Exp n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=StmList()
   n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=Exp()
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new StmExp(n0,n2,n3,n5,n6); }
}
